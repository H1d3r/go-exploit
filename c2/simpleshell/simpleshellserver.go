package simpleshell

import (
	"bufio"
	"net"
	"os"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/vulncheck-oss/go-exploit/output"
)

// The SimpleShellServer implements a basic reverse shell catcher. The server listens on a user provided
// port and catches incoming unencrypted connections. The c2 implements a basic command line that lacks
// any type of useful bash-like features (history, interactive behavior, displaying of stderr, etc).
// The server can accept multiple connections, but the user has no way of swapping between them unless
// the terminate the connection.
type Server struct {
	Listener net.Listener
}

var serverSingleton *Server

// A basic singleton interface for the c2.
func GetServerInstance() *Server {
	if serverSingleton == nil {
		serverSingleton = new(Server)
	}

	return serverSingleton
}

// User options for the simple shell server (currently empty).
func (shellServer *Server) CreateFlags() {
}

// Validate configuration and create the listening socket.
func (shellServer *Server) Init(ipAddr string, port int, isClient bool) bool {
	if isClient {
		output.PrintFrameworkError("Called SimpleShellServer as a client. Use lhost and lport.")

		return false
	}

	output.PrintfFrameworkStatus("Starting listener on %s:%d", ipAddr, port)

	var err error
	shellServer.Listener, err = net.Listen("tcp", ipAddr+":"+strconv.Itoa(port))
	if err != nil {
		output.PrintFrameworkError("Couldn't create the server: " + err.Error())

		return false
	}

	return true
}

// Listen for incoming.
func (shellServer *Server) Run(timeout int) {
	// mutex for user input
	var cliLock sync.Mutex

	// track if we got a shell or not
	success := false

	// terminate the server if no shells come in within timeout seconds
	go func() {
		time.Sleep(time.Duration(timeout) * time.Second)
		if !success {
			output.PrintFrameworkError("Timeout met. Shutting down shell listener.")
			shellServer.Listener.Close()
		}
	}()

	// Accept arbitrary connections. In the future we need something for the
	// user to select which connection to make active
	for {
		client, err := shellServer.Listener.Accept()
		if err != nil {
			if !strings.Contains(err.Error(), "use of closed network connection") {
				output.PrintFrameworkError(err.Error())
			}

			return
		}
		success = true
		output.PrintfFrameworkSuccess("Caught new shell from %v", client.RemoteAddr())
		go handleSimpleConn(client, &cliLock, client.RemoteAddr())
	}
}

func handleSimpleConn(client net.Conn, cliLock *sync.Mutex, remoteAddr net.Addr) {
	// connections will stack up here. Currently that will mean a race
	// to the next connection but we can add in attacker handling of
	// connections latter
	cliLock.Lock()
	defer cliLock.Unlock()

	output.PrintfFrameworkSuccess("Active shell from %v", remoteAddr)
	buffReader := bufio.NewReader(client)
	for {
		// give the user a prompt and ask them for input
		output.PrintShell("$ ")
		reader := bufio.NewReader(os.Stdin)
		userInput, _ := reader.ReadString('\n')
		_, writeError := client.Write([]byte(userInput))
		if writeError != nil {
			goto cleanup
		}

		// this shell expect some type of response. give a high timeout on the
		// first read and a tight timeout on the remaining.
		wait := 10000
		for {
			err := client.SetReadDeadline(time.Now().Add(time.Duration(wait) * time.Millisecond))
			if err != nil {
				goto cleanup
			}
			line, err := buffReader.ReadBytes('\n')
			if err != nil {
				if !strings.Contains(err.Error(), "i/o timeout") {
					goto cleanup
				}

				break
			}
			output.PrintShell(string(line))
			wait = 100
		}
	}

cleanup:
	client.Close()
	output.PrintfFrameworkStatus("Shell from %v terminated", remoteAddr)
}
