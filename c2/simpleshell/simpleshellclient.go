package simpleshell

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/vulncheck-oss/go-exploit/output"
)

type Client struct {
	ConnectAddr string
	ConnectPort int
}

var clientSingleton *Client

func GetClientInstance() *Client {
	if clientSingleton == nil {
		clientSingleton = new(Client)
	}

	return clientSingleton
}

func (shellClient *Client) CreateFlags() {
}

func (shellClient *Client) Init(ipAddr string, port int, isClient bool) bool {
	shellClient.ConnectAddr = ipAddr
	shellClient.ConnectPort = port

	if !isClient {
		output.PrintFrameworkError("Called SimpleShellClient as a server. Use bport.")

		return false
	}

	return true
}

func (shellClient *Client) Run(timeout int) {
	conn, ok := connect(shellClient.ConnectAddr, shellClient.ConnectPort, timeout)
	if !ok {
		return
	}

	for {
		buffReader := bufio.NewReader(conn)
		for {
			for {
				// read until the timeout hits
				err := conn.SetReadDeadline(time.Now().Add(1 * time.Second))
				if err != nil {
					conn.Close()
					output.PrintFrameworkError("Shell terminated")

					return
				}
				line, err := buffReader.ReadBytes('\n')
				if err != nil {
					if !strings.Contains(err.Error(), "i/o timeout") {
						conn.Close()
						output.PrintFrameworkError("Shell terminated")

						return
					}

					break
				}
				fmt.Print(string(line))
			}

			fmt.Print("$ ")
			reader := bufio.NewReader(os.Stdin)
			userInput, _ := reader.ReadString('\n')
			_, writeErr := conn.Write([]byte(userInput))
			if writeErr != nil {
				conn.Close()
				output.PrintFrameworkError("Shell terminated")

				return
			}
		}
	}
}

func connect(ipAddr string, port int, timeout int) (net.Conn, bool) {
	// loop for 30 seconds trying to make the connection
	for i := 0; true; i += 3 {
		conn, err := net.Dial("tcp", ipAddr+":"+strconv.Itoa(port))
		if err != nil {
			if i > timeout {
				output.PrintFrameworkError("Could not connect to the remote host: " + err.Error())

				return nil, false
			}
			time.Sleep(3 * time.Second)
		} else {
			output.PrintfFrameworkSuccess("Connected to %s:%d!", ipAddr, port)

			return conn, true
		}
	}

	return nil, false
}
