package c2

import (
	"github.com/vulncheck-oss/go-exploit/c2/simpleshell"
	"github.com/vulncheck-oss/go-exploit/c2/sslshell"
	"github.com/vulncheck-oss/go-exploit/output"
)

// A generic interface used by both reverse shells and bind shells.
type Interface interface {
	Init(ipAddr string, port int, isClient bool) bool
	Run(timeout int)
}

type Impl int

const (
	SimpleShellServer Impl = 0
	SimpleShellClient Impl = 1
	SSLShellServer    Impl = 2
)

var names = [...]string{
	"SimpleShellServer",
	"SimpleShellClient",
	"SSLShellServer",
}

// factory pattern for creating c2 interfaces. Note that this is
// returning an interface, which is a bit anti-Go but it's more or less
// exactly what we want so.
func New(c2Impl Impl) (Interface, bool) {
	switch c2Impl {
	case SimpleShellServer:
		return new(simpleshell.Server), true
	case SimpleShellClient:
		return new(simpleshell.Client), true
	case SSLShellServer:
		return new(sslshell.Server), true
	default:
		output.PrintError("Invalid C2 Server")
	}

	return nil, false
}

// convert a ServerImpl enum to the string equivalent.
func ImplToString(c2Name Impl) (string, bool) {
	if int(c2Name) >= len(names) {
		return "", false
	}

	return names[c2Name], true
}

// convert a ServerImpl name to the enum equivalent.
func StringToImpl(c2Name string) (Impl, bool) {
	for index, value := range names {
		if value == c2Name {
			return Impl(index), true
		}
	}

	return SimpleShellServer, false
}
