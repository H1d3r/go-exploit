package httpserveshell

import (
	"flag"
	"sync"

	"github.com/vulncheck-oss/go-exploit/c2/httpservefile"
	"github.com/vulncheck-oss/go-exploit/c2/simpleshell"
	"github.com/vulncheck-oss/go-exploit/c2/sslshell"
	"github.com/vulncheck-oss/go-exploit/output"
)

type Server struct {
	// Indicates if we should use SSLShell or SimpleShell
	SSLShell bool
	// The HTTP address to bind to
	HTTPAddr string
	// The HTTP port to bind to
	HTTPPort int
}

var singleton *Server

// A basic singleton interface for the c2.
func GetInstance() *Server {
	if singleton == nil {
		singleton = new(Server)
	}

	return singleton
}

// User options for serving a file over HTTP as the "c2".
func (serveShell *Server) CreateFlags() {
	flag.BoolVar(&serveShell.SSLShell, "httpServeShell.SSLShell", true, "Indicates if the SSLShell or SimpleShell is used")

	// normal "httpservefile" uses lhost,lport for binding so we need to create new vars for that
	flag.StringVar(&serveShell.HTTPAddr, "httpServeFile.BindAddr", "", "The address to bind the HTTP serve to")
	flag.IntVar(&serveShell.HTTPPort, "httpServeFile.BindPort", 8080, "The port to bind the HTTP serve to")

	httpservefile.GetInstance().CreateFlags()
	sslshell.GetInstance().CreateFlags()
}

// load the provided file into memory. Generate the random filename.
func (serveShell *Server) Init(rhost string, rport int, isClient bool) bool {
	if len(serveShell.HTTPAddr) == 0 {
		output.PrintFrameworkError("User must specify -httpServeFile.BindAddr")

		return false
	}

	if !httpservefile.GetInstance().Init(serveShell.HTTPAddr, serveShell.HTTPPort, isClient) {
		return false
	}

	if serveShell.SSLShell {
		return sslshell.GetInstance().Init(rhost, rport, isClient)
	}

	return simpleshell.GetServerInstance().Init(rhost, rport, isClient)
}

// start the http server and shell and wait for them to exit.
func (serveShell *Server) Run(timeout int) {
	var wg sync.WaitGroup

	// Spin up the shell
	wg.Add(1)
	go func() {
		defer wg.Done()
		if serveShell.SSLShell {
			sslshell.GetInstance().Run(timeout)
		} else {
			simpleshell.GetServerInstance().Run(timeout)
		}
	}()

	// Spin up the http server
	wg.Add(1)
	go func() {
		defer wg.Done()
		httpservefile.GetInstance().Run(timeout)
	}()

	// wait until the go routines are clean up
	wg.Wait()
}
