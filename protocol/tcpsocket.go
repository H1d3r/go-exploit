package protocol

import (
	"net"
	"strconv"

	"github.com/vulncheck-oss/go-exploit/output"
)

func TCPConnect(host string, port int) (*net.TCPConn, bool) {
	target := host + ":" + strconv.Itoa(port)
	output.PrintfFrameworkStatus("Connecting to " + target)
	tcpAddr, err := net.ResolveTCPAddr("tcp", target)
	if err != nil {
		output.PrintFrameworkError("ResolveTCPAddr failed: " + err.Error())

		return nil, false
	}

	conn, err := net.DialTCP("tcp", nil, tcpAddr)
	if err != nil {
		output.PrintFrameworkError("Connection failed: " + err.Error())

		return nil, false
	}

	return conn, true
}

func TCPWrite(conn *net.TCPConn, data []byte) bool {
	written, err := conn.Write(data)
	if err != nil {
		output.PrintFrameworkError("Server write failed: " + err.Error())

		return false
	}
	if written != len(data) {
		output.PrintFrameworkError("Failed to write all data")

		return false
	}

	return true
}

func TCPReadAmount(conn *net.TCPConn, amount int) ([]byte, bool) {
	reply := make([]byte, amount)
	count, err := conn.Read(reply)
	if err != nil {
		output.PrintFrameworkError("Failed to read from the socket: " + err.Error())

		return nil, false
	}
	if count != amount {
		output.PrintFrameworkError("Failed to read specified amount from the socket")

		return nil, false
	}

	return reply, true
}
