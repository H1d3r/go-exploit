package cli

import (
	"testing"

	"github.com/vulncheck-oss/go-exploit/c2"
	"github.com/vulncheck-oss/go-exploit/config"
)

func TestCodeExecutionCmdLineParse(t *testing.T) {
	conf := config.New(config.CodeExecution, []c2.Impl{c2.SimpleShellServer}, "test product", "CVE-2023-1270", 1270)
	conf.Rhost = "rcetest"

	success := CodeExecutionCmdLineParse(conf)

	if conf.Rhost != "" {
		t.Fatal("Rhost should have no default value")
	}
	if conf.Rport != 1270 {
		t.Fatal("Rport should default to passed in value")
	}
	if conf.SSL != false {
		t.Fatal("SSL should default to false")
	}
	if conf.DoVerify != false {
		t.Fatal("verify should default to false")
	}
	if conf.DoVersionCheck != false {
		t.Fatal("version check should default to false")
	}
	if conf.DoExploit != false {
		t.Fatal("exploit should default to false")
	}
	if success != false {
		t.Fatal("parsing should have failed")
	}
	if conf.ThirdPartyC2Server != false {
		t.Fatal("outside should default to false")
	}
	if conf.C2Timeout != 30 {
		t.Fatal("timeout should default to 30")
	}
}

func TestCommonValidate(t *testing.T) {
	conf := config.New(config.CodeExecution, []c2.Impl{c2.SimpleShellServer}, "test product", "CVE-2023-1270", 1270)
	var rhosts string
	var rports string

	if commonValidate(conf, rhosts, rports) {
		t.Fatal("commonValidate should fail with an empty Rhost")
	}

	conf.Rhost = "10.9.49.99"
	if commonValidate(conf, rhosts, rports) {
		t.Fatal("commonValidate should fail with no supplied action")
	}

	conf.DoVerify = true
	if !commonValidate(conf, rhosts, rports) {
		t.Fatal("commonValidate should succeed with rhost, rport, and doVerify")
	}

	// clear rports
	conf.Rports = make([]int, 0)
	if !commonValidate(conf, rhosts, "1270,1280") {
		t.Fatal("commonValidate have succeeded")
	}

	if len(conf.Rports) != 2 || conf.Rports[0] != 1270 || conf.Rports[1] != 1280 {
		t.Fatalf("commonValidate didn't convert the port array correctly: %d %d %d", len(conf.Rports), conf.Rports[0], conf.Rports[1])
	}

	// clear rhosts
	conf.Rhosts = make([]string, 0)
	if !commonValidate(conf, "127.0.0.1,127.0.0.2", rports) {
		t.Fatal("commonValidate have succeeded")
	}

	if len(conf.Rhosts) != 2 || conf.Rhosts[0] != "127.0.0.1" || conf.Rhosts[1] != "127.0.0.2" {
		t.Fatalf("commonValidate didn't convert the port array correctly: %d %s %s", len(conf.Rhosts), conf.Rhosts[0], conf.Rhosts[1])
	}
}
